import { getProp } from '@ygkit/object';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function sleep(ms) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve) {
                    setTimeout(resolve, ms);
                })];
        });
    });
}

function waitResponse(_a) {
    var callback = _a.callback, targetProp = _a.targetProp, 
    // wait status
    targetResponse = _a.targetResponse, 
    // timeout mini seconds
    timeout = _a.timeout, _b = _a.loopGap, loopGap = _b === void 0 ? 1000 : _b, 
    // start mini seconds
    _c = _a.start, 
    // start mini seconds
    start = _c === void 0 ? Date.now() : _c, 
    // promise resolve
    resolve = _a.resolve, 
    // promise reject
    reject = _a.reject;
    return __awaiter(this, void 0, void 0, function () {
        var now;
        var _this = this;
        return __generator(this, function (_d) {
            now = Date.now();
            return [2 /*return*/, new Promise(function (res, rej) { return __awaiter(_this, void 0, void 0, function () {
                    var response, prop, e_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 7, , 8]);
                                resolve = resolve || res;
                                reject = reject || rej;
                                // timeout
                                if (now - start > timeout) {
                                    reject(new Error('Request Timeout'));
                                }
                                return [4 /*yield*/, callback()];
                            case 1:
                                response = _a.sent();
                                if (!targetResponse) return [3 /*break*/, 5];
                                if (!targetProp) {
                                    reject(new Error('Unknow target response property'));
                                }
                                prop = getProp(response, targetProp);
                                if (!(response && prop === targetResponse)) return [3 /*break*/, 2];
                                resolve(response);
                                return [3 /*break*/, 4];
                            case 2: return [4 /*yield*/, sleep(loopGap)];
                            case 3:
                                _a.sent();
                                return [2 /*return*/, waitResponse({
                                        callback: callback,
                                        targetProp: targetProp,
                                        targetResponse: targetResponse,
                                        timeout: timeout,
                                        start: start,
                                        resolve: resolve,
                                        reject: reject,
                                    })];
                            case 4: return [3 /*break*/, 6];
                            case 5:
                                if (response === targetResponse) {
                                    resolve(response);
                                }
                                else {
                                    return [2 /*return*/, waitResponse({
                                            callback: callback,
                                            targetProp: targetProp,
                                            targetResponse: targetResponse,
                                            timeout: timeout,
                                            start: start,
                                            resolve: resolve,
                                            reject: reject,
                                        })];
                                }
                                _a.label = 6;
                            case 6: return [3 /*break*/, 8];
                            case 7:
                                e_1 = _a.sent();
                                reject && reject(e_1);
                                return [3 /*break*/, 8];
                            case 8: return [2 /*return*/];
                        }
                    });
                }); })];
        });
    });
}

export { sleep, waitResponse };
//# sourceMappingURL=index.esm.js.map
